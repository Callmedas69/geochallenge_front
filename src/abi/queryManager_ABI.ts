export const queryManager_ABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_competitionContract",
        type: "address",
      },
      { internalType: "address", name: "_userTracking", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "queryCount",
        type: "uint256",
      },
    ],
    name: "BulkQueryExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "HealthCheckExecuted",
    type: "event",
  },
  {
    inputs: [
      { internalType: "uint256", name: "_competitionId", type: "uint256" },
    ],
    name: "checkCompetitionHealth",
    outputs: [
      { internalType: "bool", name: "exists", type: "bool" },
      { internalType: "bool", name: "isActive", type: "bool" },
      { internalType: "bool", name: "hasParticipants", type: "bool" },
      { internalType: "bool", name: "isPaused", type: "bool" },
      { internalType: "bool", name: "isExpired", type: "bool" },
      { internalType: "uint256", name: "timeRemaining", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "competitionContract",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "competitionStorage",
    outputs: [
      {
        internalType: "contract ICompetitionStorage",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getActiveCompetitions",
    outputs: [
      { internalType: "uint256[]", name: "activeIds", type: "uint256[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collectionAddress",
            type: "address",
          },
          { internalType: "uint8[]", name: "rarityTiers", type: "uint8[]" },
          { internalType: "uint256", name: "ticketPrice", type: "uint256" },
          { internalType: "address", name: "treasuryWallet", type: "address" },
          { internalType: "uint256", name: "treasuryPercent", type: "uint256" },
          { internalType: "uint256", name: "deadline", type: "uint256" },
          { internalType: "bool", name: "boosterBoxEnabled", type: "bool" },
          {
            internalType: "address",
            name: "boosterBoxAddress",
            type: "address",
          },
          { internalType: "address", name: "verifierAddress", type: "address" },
          {
            internalType: "enum ICompetitionStorage.CompetitionState",
            name: "state",
            type: "uint8",
          },
          { internalType: "address", name: "winner", type: "address" },
          { internalType: "uint256", name: "prizePool", type: "uint256" },
          { internalType: "uint256", name: "totalTickets", type: "uint256" },
          { internalType: "bool", name: "winnerDeclared", type: "bool" },
          {
            internalType: "uint256",
            name: "winnerDeclaredAt",
            type: "uint256",
          },
          { internalType: "bool", name: "emergencyPaused", type: "bool" },
        ],
        internalType: "struct ICompetitionStorage.Competition[]",
        name: "activeComps",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCompetitionStats",
    outputs: [
      { internalType: "uint256", name: "notStarted", type: "uint256" },
      { internalType: "uint256", name: "active", type: "uint256" },
      { internalType: "uint256", name: "ended", type: "uint256" },
      { internalType: "uint256", name: "finalized", type: "uint256" },
      { internalType: "uint256", name: "emergencyPaused", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ICompetitionStorage.CompetitionState",
        name: "_state",
        type: "uint8",
      },
    ],
    name: "getCompetitionsByState",
    outputs: [
      { internalType: "uint256[]", name: "stateIds", type: "uint256[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collectionAddress",
            type: "address",
          },
          { internalType: "uint8[]", name: "rarityTiers", type: "uint8[]" },
          { internalType: "uint256", name: "ticketPrice", type: "uint256" },
          { internalType: "address", name: "treasuryWallet", type: "address" },
          { internalType: "uint256", name: "treasuryPercent", type: "uint256" },
          { internalType: "uint256", name: "deadline", type: "uint256" },
          { internalType: "bool", name: "boosterBoxEnabled", type: "bool" },
          {
            internalType: "address",
            name: "boosterBoxAddress",
            type: "address",
          },
          { internalType: "address", name: "verifierAddress", type: "address" },
          {
            internalType: "enum ICompetitionStorage.CompetitionState",
            name: "state",
            type: "uint8",
          },
          { internalType: "address", name: "winner", type: "address" },
          { internalType: "uint256", name: "prizePool", type: "uint256" },
          { internalType: "uint256", name: "totalTickets", type: "uint256" },
          { internalType: "bool", name: "winnerDeclared", type: "bool" },
          {
            internalType: "uint256",
            name: "winnerDeclaredAt",
            type: "uint256",
          },
          { internalType: "bool", name: "emergencyPaused", type: "bool" },
        ],
        internalType: "struct ICompetitionStorage.Competition[]",
        name: "stateComps",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractHealth",
    outputs: [
      { internalType: "uint256", name: "totalCompetitions", type: "uint256" },
      { internalType: "uint256", name: "activeCompetitions", type: "uint256" },
      { internalType: "uint256", name: "totalEthLocked", type: "uint256" },
      { internalType: "uint256", name: "pendingRefunds", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getExpiredCompetitions",
    outputs: [
      { internalType: "uint256[]", name: "expiredIds", type: "uint256[]" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256[]", name: "_competitionIds", type: "uint256[]" },
    ],
    name: "getMultipleCompetitions",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "collectionAddress",
            type: "address",
          },
          { internalType: "uint8[]", name: "rarityTiers", type: "uint8[]" },
          { internalType: "uint256", name: "ticketPrice", type: "uint256" },
          { internalType: "address", name: "treasuryWallet", type: "address" },
          { internalType: "uint256", name: "treasuryPercent", type: "uint256" },
          { internalType: "uint256", name: "deadline", type: "uint256" },
          { internalType: "bool", name: "boosterBoxEnabled", type: "bool" },
          {
            internalType: "address",
            name: "boosterBoxAddress",
            type: "address",
          },
          { internalType: "address", name: "verifierAddress", type: "address" },
          {
            internalType: "enum ICompetitionStorage.CompetitionState",
            name: "state",
            type: "uint8",
          },
          { internalType: "address", name: "winner", type: "address" },
          { internalType: "uint256", name: "prizePool", type: "uint256" },
          { internalType: "uint256", name: "totalTickets", type: "uint256" },
          { internalType: "bool", name: "winnerDeclared", type: "bool" },
          {
            internalType: "uint256",
            name: "winnerDeclaredAt",
            type: "uint256",
          },
          { internalType: "bool", name: "emergencyPaused", type: "bool" },
        ],
        internalType: "struct ICompetitionStorage.Competition[]",
        name: "competitions",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "offset", type: "uint256" },
      { internalType: "uint256", name: "limit", type: "uint256" },
    ],
    name: "getPaginatedCompetitions",
    outputs: [
      { internalType: "uint256[]", name: "competitionIds", type: "uint256[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collectionAddress",
            type: "address",
          },
          { internalType: "uint8[]", name: "rarityTiers", type: "uint8[]" },
          { internalType: "uint256", name: "ticketPrice", type: "uint256" },
          { internalType: "address", name: "treasuryWallet", type: "address" },
          { internalType: "uint256", name: "treasuryPercent", type: "uint256" },
          { internalType: "uint256", name: "deadline", type: "uint256" },
          { internalType: "bool", name: "boosterBoxEnabled", type: "bool" },
          {
            internalType: "address",
            name: "boosterBoxAddress",
            type: "address",
          },
          { internalType: "address", name: "verifierAddress", type: "address" },
          {
            internalType: "enum ICompetitionStorage.CompetitionState",
            name: "state",
            type: "uint8",
          },
          { internalType: "address", name: "winner", type: "address" },
          { internalType: "uint256", name: "prizePool", type: "uint256" },
          { internalType: "uint256", name: "totalTickets", type: "uint256" },
          { internalType: "bool", name: "winnerDeclared", type: "bool" },
          {
            internalType: "uint256",
            name: "winnerDeclaredAt",
            type: "uint256",
          },
          { internalType: "bool", name: "emergencyPaused", type: "bool" },
        ],
        internalType: "struct ICompetitionStorage.Competition[]",
        name: "competitions",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalValueLocked",
    outputs: [{ internalType: "uint256", name: "totalTVL", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "getUserActiveCompetitions",
    outputs: [
      { internalType: "uint256[]", name: "activeIds", type: "uint256[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collectionAddress",
            type: "address",
          },
          { internalType: "uint8[]", name: "rarityTiers", type: "uint8[]" },
          { internalType: "uint256", name: "ticketPrice", type: "uint256" },
          { internalType: "address", name: "treasuryWallet", type: "address" },
          { internalType: "uint256", name: "treasuryPercent", type: "uint256" },
          { internalType: "uint256", name: "deadline", type: "uint256" },
          { internalType: "bool", name: "boosterBoxEnabled", type: "bool" },
          {
            internalType: "address",
            name: "boosterBoxAddress",
            type: "address",
          },
          { internalType: "address", name: "verifierAddress", type: "address" },
          {
            internalType: "enum ICompetitionStorage.CompetitionState",
            name: "state",
            type: "uint8",
          },
          { internalType: "address", name: "winner", type: "address" },
          { internalType: "uint256", name: "prizePool", type: "uint256" },
          { internalType: "uint256", name: "totalTickets", type: "uint256" },
          { internalType: "bool", name: "winnerDeclared", type: "bool" },
          {
            internalType: "uint256",
            name: "winnerDeclaredAt",
            type: "uint256",
          },
          { internalType: "bool", name: "emergencyPaused", type: "bool" },
        ],
        internalType: "struct ICompetitionStorage.Competition[]",
        name: "activeComps",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "getUserCompetitions",
    outputs: [
      { internalType: "uint256[]", name: "competitionIds", type: "uint256[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collectionAddress",
            type: "address",
          },
          { internalType: "uint8[]", name: "rarityTiers", type: "uint8[]" },
          { internalType: "uint256", name: "ticketPrice", type: "uint256" },
          { internalType: "address", name: "treasuryWallet", type: "address" },
          { internalType: "uint256", name: "treasuryPercent", type: "uint256" },
          { internalType: "uint256", name: "deadline", type: "uint256" },
          { internalType: "bool", name: "boosterBoxEnabled", type: "bool" },
          {
            internalType: "address",
            name: "boosterBoxAddress",
            type: "address",
          },
          { internalType: "address", name: "verifierAddress", type: "address" },
          {
            internalType: "enum ICompetitionStorage.CompetitionState",
            name: "state",
            type: "uint8",
          },
          { internalType: "address", name: "winner", type: "address" },
          { internalType: "uint256", name: "prizePool", type: "uint256" },
          { internalType: "uint256", name: "totalTickets", type: "uint256" },
          { internalType: "bool", name: "winnerDeclared", type: "bool" },
          {
            internalType: "uint256",
            name: "winnerDeclaredAt",
            type: "uint256",
          },
          { internalType: "bool", name: "emergencyPaused", type: "bool" },
        ],
        internalType: "struct ICompetitionStorage.Competition[]",
        name: "competitions",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "getUserCompletedCompetitions",
    outputs: [
      { internalType: "uint256[]", name: "completedIds", type: "uint256[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collectionAddress",
            type: "address",
          },
          { internalType: "uint8[]", name: "rarityTiers", type: "uint8[]" },
          { internalType: "uint256", name: "ticketPrice", type: "uint256" },
          { internalType: "address", name: "treasuryWallet", type: "address" },
          { internalType: "uint256", name: "treasuryPercent", type: "uint256" },
          { internalType: "uint256", name: "deadline", type: "uint256" },
          { internalType: "bool", name: "boosterBoxEnabled", type: "bool" },
          {
            internalType: "address",
            name: "boosterBoxAddress",
            type: "address",
          },
          { internalType: "address", name: "verifierAddress", type: "address" },
          {
            internalType: "enum ICompetitionStorage.CompetitionState",
            name: "state",
            type: "uint8",
          },
          { internalType: "address", name: "winner", type: "address" },
          { internalType: "uint256", name: "prizePool", type: "uint256" },
          { internalType: "uint256", name: "totalTickets", type: "uint256" },
          { internalType: "bool", name: "winnerDeclared", type: "bool" },
          {
            internalType: "uint256",
            name: "winnerDeclaredAt",
            type: "uint256",
          },
          { internalType: "bool", name: "emergencyPaused", type: "bool" },
        ],
        internalType: "struct ICompetitionStorage.Competition[]",
        name: "completedComps",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "getUserDashboardData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalCompetitionsJoined",
            type: "uint256",
          },
          { internalType: "uint256", name: "totalPrizesWon", type: "uint256" },
          { internalType: "uint256", name: "competitionsWon", type: "uint256" },
        ],
        internalType: "struct ICompetitionStorage.UserStats",
        name: "stats",
        type: "tuple",
      },
      { internalType: "uint256[]", name: "activeCompIds", type: "uint256[]" },
      {
        internalType: "uint256[]",
        name: "claimableCompIds",
        type: "uint256[]",
      },
      { internalType: "uint256", name: "totalCompetitions", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "_competitionIds", type: "uint256[]" },
    ],
    name: "getUserTicketStatus",
    outputs: [{ internalType: "bool[]", name: "statuses", type: "bool[]" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "userTracking",
    outputs: [
      { internalType: "contract UserTracking", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;
